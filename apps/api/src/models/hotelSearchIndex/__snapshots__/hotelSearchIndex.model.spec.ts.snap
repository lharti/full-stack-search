// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HotelSearchIndexModel should have the right schema 1`] = `
Schema {
  "$globalPluginsApplied": true,
  "$id": 1,
  "_indexes": [],
  "_searchIndexes": [],
  "_userProvidedOptions": {},
  "aliases": {},
  "callQueue": [],
  "childSchemas": [],
  "inherits": {},
  "mapPaths": [],
  "methodOptions": {
    "typegooseName": undefined,
  },
  "methods": {
    "typegooseName": [Function],
  },
  "nested": {},
  "obj": {
    "fragmentsTokens": {
      "index": true,
      "required": false,
      "type": [
        {
          "type": [Function],
        },
      ],
    },
    "hotelId": {
      "required": true,
      "type": [Function],
    },
    "hotelName": {
      "required": true,
      "type": [Function],
    },
    "prefixTokens": {
      "index": true,
      "required": false,
      "type": [
        {
          "type": [Function],
        },
      ],
    },
    "semanticTokens": {
      "index": true,
      "required": false,
      "type": [
        {
          "type": [Function],
        },
      ],
    },
  },
  "options": {
    "_id": true,
    "autoIndex": null,
    "bufferCommands": true,
    "capped": false,
    "discriminatorKey": "__t",
    "id": true,
    "minimize": true,
    "optimisticConcurrency": false,
    "pluralization": true,
    "read": null,
    "shardKey": null,
    "strict": true,
    "strictQuery": false,
    "typeKey": "type",
    "validateBeforeSave": true,
    "validateModifiedOnly": false,
    "versionKey": "__v",
  },
  "paths": {
    "__v": SchemaNumber {
      "_index": null,
      "_presplitPath": [
        "__v",
      ],
      "getters": [],
      "instance": "Number",
      "options": SchemaNumberOptions {
        "type": [Function],
      },
      "path": "__v",
      "setters": [],
      "validators": [],
      Symbol(mongoose#schemaType): true,
    },
    "_id": SchemaObjectId {
      "_index": null,
      "_presplitPath": [
        "_id",
      ],
      "defaultValue": [Function],
      "getters": [],
      "instance": "ObjectId",
      "options": SchemaObjectIdOptions {
        "auto": true,
        "type": "ObjectId",
      },
      "path": "_id",
      "setters": [
        [Function],
      ],
      "validators": [],
      Symbol(mongoose#schemaType): true,
    },
    "fragmentsTokens": SchemaArray {
      "$embeddedSchemaType": SchemaString {
        "_arrayParentPath": "fragmentsTokens",
        "_arrayPath": "fragmentsTokens.$",
        "_index": null,
        "_presplitPath": [
          "fragmentsTokens",
        ],
        "enumValues": [],
        "getters": [],
        "instance": "String",
        "options": SchemaStringOptions {},
        "path": "fragmentsTokens",
        "regExp": null,
        "setters": [],
        "validators": [],
        Symbol(mongoose#schemaType): true,
      },
      "$isMongooseArray": true,
      "_index": true,
      "_presplitPath": [
        "fragmentsTokens",
      ],
      "caster": SchemaString {
        "_arrayParentPath": "fragmentsTokens",
        "_arrayPath": "fragmentsTokens.$",
        "_index": null,
        "_presplitPath": [
          "fragmentsTokens",
        ],
        "enumValues": [],
        "getters": [],
        "instance": "String",
        "options": SchemaStringOptions {},
        "path": "fragmentsTokens",
        "regExp": null,
        "setters": [],
        "validators": [],
        Symbol(mongoose#schemaType): true,
      },
      "casterConstructor": [Function],
      "defaultValue": [Function],
      "getters": [],
      "instance": "Array",
      "isRequired": false,
      "options": SchemaArrayOptions {
        "index": true,
        "required": false,
        "type": [
          {
            "type": [Function],
          },
        ],
      },
      "path": "fragmentsTokens",
      "schemaOptions": {
        "_id": true,
        "autoIndex": null,
        "bufferCommands": true,
        "capped": false,
        "discriminatorKey": "__t",
        "id": true,
        "minimize": true,
        "optimisticConcurrency": false,
        "pluralization": true,
        "read": null,
        "shardKey": null,
        "strict": true,
        "strictQuery": false,
        "typeKey": "type",
        "validateBeforeSave": true,
        "validateModifiedOnly": false,
        "versionKey": "__v",
      },
      "setters": [],
      "validators": [],
      Symbol(mongoose#schemaType): true,
    },
    "hotelId": SchemaObjectId {
      "_index": null,
      "_presplitPath": [
        "hotelId",
      ],
      "getters": [],
      "instance": "ObjectId",
      "isRequired": true,
      "options": SchemaObjectIdOptions {
        "required": true,
        "type": [Function],
      },
      "originalRequiredValue": true,
      "path": "hotelId",
      "requiredValidator": [Function],
      "setters": [],
      "validators": [
        {
          "message": "Path \`{PATH}\` is required.",
          "type": "required",
          "validator": [Function],
        },
      ],
      Symbol(mongoose#schemaType): true,
    },
    "hotelName": SchemaString {
      "_index": null,
      "_presplitPath": [
        "hotelName",
      ],
      "enumValues": [],
      "getters": [],
      "instance": "String",
      "isRequired": true,
      "options": SchemaStringOptions {
        "required": true,
        "type": [Function],
      },
      "originalRequiredValue": true,
      "path": "hotelName",
      "regExp": null,
      "requiredValidator": [Function],
      "setters": [],
      "validators": [
        {
          "message": "Path \`{PATH}\` is required.",
          "type": "required",
          "validator": [Function],
        },
      ],
      Symbol(mongoose#schemaType): true,
    },
    "prefixTokens": SchemaArray {
      "$embeddedSchemaType": SchemaString {
        "_arrayParentPath": "prefixTokens",
        "_arrayPath": "prefixTokens.$",
        "_index": null,
        "_presplitPath": [
          "prefixTokens",
        ],
        "enumValues": [],
        "getters": [],
        "instance": "String",
        "options": SchemaStringOptions {},
        "path": "prefixTokens",
        "regExp": null,
        "setters": [],
        "validators": [],
        Symbol(mongoose#schemaType): true,
      },
      "$isMongooseArray": true,
      "_index": true,
      "_presplitPath": [
        "prefixTokens",
      ],
      "caster": SchemaString {
        "_arrayParentPath": "prefixTokens",
        "_arrayPath": "prefixTokens.$",
        "_index": null,
        "_presplitPath": [
          "prefixTokens",
        ],
        "enumValues": [],
        "getters": [],
        "instance": "String",
        "options": SchemaStringOptions {},
        "path": "prefixTokens",
        "regExp": null,
        "setters": [],
        "validators": [],
        Symbol(mongoose#schemaType): true,
      },
      "casterConstructor": [Function],
      "defaultValue": [Function],
      "getters": [],
      "instance": "Array",
      "isRequired": false,
      "options": SchemaArrayOptions {
        "index": true,
        "required": false,
        "type": [
          {
            "type": [Function],
          },
        ],
      },
      "path": "prefixTokens",
      "schemaOptions": {
        "_id": true,
        "autoIndex": null,
        "bufferCommands": true,
        "capped": false,
        "discriminatorKey": "__t",
        "id": true,
        "minimize": true,
        "optimisticConcurrency": false,
        "pluralization": true,
        "read": null,
        "shardKey": null,
        "strict": true,
        "strictQuery": false,
        "typeKey": "type",
        "validateBeforeSave": true,
        "validateModifiedOnly": false,
        "versionKey": "__v",
      },
      "setters": [],
      "validators": [],
      Symbol(mongoose#schemaType): true,
    },
    "semanticTokens": SchemaArray {
      "$embeddedSchemaType": SchemaString {
        "_arrayParentPath": "semanticTokens",
        "_arrayPath": "semanticTokens.$",
        "_index": null,
        "_presplitPath": [
          "semanticTokens",
        ],
        "enumValues": [],
        "getters": [],
        "instance": "String",
        "options": SchemaStringOptions {},
        "path": "semanticTokens",
        "regExp": null,
        "setters": [],
        "validators": [],
        Symbol(mongoose#schemaType): true,
      },
      "$isMongooseArray": true,
      "_index": true,
      "_presplitPath": [
        "semanticTokens",
      ],
      "caster": SchemaString {
        "_arrayParentPath": "semanticTokens",
        "_arrayPath": "semanticTokens.$",
        "_index": null,
        "_presplitPath": [
          "semanticTokens",
        ],
        "enumValues": [],
        "getters": [],
        "instance": "String",
        "options": SchemaStringOptions {},
        "path": "semanticTokens",
        "regExp": null,
        "setters": [],
        "validators": [],
        Symbol(mongoose#schemaType): true,
      },
      "casterConstructor": [Function],
      "defaultValue": [Function],
      "getters": [],
      "instance": "Array",
      "isRequired": false,
      "options": SchemaArrayOptions {
        "index": true,
        "required": false,
        "type": [
          {
            "type": [Function],
          },
        ],
      },
      "path": "semanticTokens",
      "schemaOptions": {
        "_id": true,
        "autoIndex": null,
        "bufferCommands": true,
        "capped": false,
        "discriminatorKey": "__t",
        "id": true,
        "minimize": true,
        "optimisticConcurrency": false,
        "pluralization": true,
        "read": null,
        "shardKey": null,
        "strict": true,
        "strictQuery": false,
        "typeKey": "type",
        "validateBeforeSave": true,
        "validateModifiedOnly": false,
        "versionKey": "__v",
      },
      "setters": [],
      "validators": [],
      Symbol(mongoose#schemaType): true,
    },
  },
  "plugins": [
    {
      "fn": [Function],
      "opts": {
        "deduplicate": true,
      },
    },
    {
      "fn": [Function],
      "opts": {
        "deduplicate": true,
      },
    },
    {
      "fn": [Function],
      "opts": {
        "deduplicate": true,
      },
    },
    {
      "fn": [Function],
      "opts": {
        "deduplicate": true,
      },
    },
    {
      "fn": [Function],
      "opts": {
        "deduplicate": true,
      },
    },
  ],
  "query": {},
  "s": {
    "hooks": Kareem {
      "_posts": Map {
        "save" => [
          {
            "fn": [Function],
          },
          {
            "fn": [Function],
          },
          {
            "fn": [Function],
          },
        ],
        "init" => [
          {
            "fn": [Function],
          },
        ],
      },
      "_pres": Map {
        "save" => [
          {
            "fn": [Function],
            "isAsync": false,
          },
          {
            "fn": [Function],
            "isAsync": false,
          },
          {
            "fn": [Function],
            "isAsync": false,
          },
          {
            "fn": [Function],
            "isAsync": false,
          },
        ],
        "remove" => [
          {
            "fn": [Function],
            "isAsync": false,
          },
        ],
      },
    },
  },
  "singleNestedPaths": {},
  "statics": {
    "createSearchIndex": [Function],
    "findHotelsMatching": [Function],
  },
  "subpaths": {
    "fragmentsTokens.$": SchemaString {
      "_arrayParentPath": "fragmentsTokens",
      "_arrayPath": "fragmentsTokens.$",
      "_index": null,
      "_presplitPath": [
        "fragmentsTokens",
      ],
      "enumValues": [],
      "getters": [],
      "instance": "String",
      "options": SchemaStringOptions {},
      "path": "fragmentsTokens",
      "regExp": null,
      "setters": [],
      "validators": [],
      Symbol(mongoose#schemaType): true,
    },
    "prefixTokens.$": SchemaString {
      "_arrayParentPath": "prefixTokens",
      "_arrayPath": "prefixTokens.$",
      "_index": null,
      "_presplitPath": [
        "prefixTokens",
      ],
      "enumValues": [],
      "getters": [],
      "instance": "String",
      "options": SchemaStringOptions {},
      "path": "prefixTokens",
      "regExp": null,
      "setters": [],
      "validators": [],
      Symbol(mongoose#schemaType): true,
    },
    "semanticTokens.$": SchemaString {
      "_arrayParentPath": "semanticTokens",
      "_arrayPath": "semanticTokens.$",
      "_index": null,
      "_presplitPath": [
        "semanticTokens",
      ],
      "enumValues": [],
      "getters": [],
      "instance": "String",
      "options": SchemaStringOptions {},
      "path": "semanticTokens",
      "regExp": null,
      "setters": [],
      "validators": [],
      Symbol(mongoose#schemaType): true,
    },
  },
  "tree": {
    "__v": [Function],
    "_id": {
      "auto": true,
      "type": "ObjectId",
    },
    "fragmentsTokens": {
      "index": true,
      "required": false,
      "type": [
        {
          "type": [Function],
        },
      ],
    },
    "hotelId": {
      "required": true,
      "type": [Function],
    },
    "hotelName": {
      "required": true,
      "type": [Function],
    },
    "id": VirtualType {
      "getters": [
        [Function],
      ],
      "options": {},
      "path": "id",
      "setters": [],
    },
    "prefixTokens": {
      "index": true,
      "required": false,
      "type": [
        {
          "type": [Function],
        },
      ],
    },
    "semanticTokens": {
      "index": true,
      "required": false,
      "type": [
        {
          "type": [Function],
        },
      ],
    },
  },
  "virtuals": {
    "id": VirtualType {
      "getters": [
        [Function],
      ],
      "options": {},
      "path": "id",
      "setters": [],
    },
  },
}
`;
